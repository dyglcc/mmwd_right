buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.+'
        // The Annotations Complier
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'com.android.application'
apply plugin: 'android-apt'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Common
    compile 'com.android.support:support-v4:21.0.+'
    compile 'org.eclipse.birt.runtime.3_7_1:org.apache.commons.codec:1.3.0'
    compile 'org.apache.httpcomponents:httpmime:4.1.3'
    compile 'com.nineoldandroids:library:2.4.0'
    // AndroidAnnotations
    apt 'org.androidannotations:androidannotations:3.+'
    compile 'org.androidannotations:androidannotations-api:3.+'
    // ActionBarSherlock
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    // Square's
    compile 'com.squareup.retrofit:retrofit:1.8.0'
    compile 'com.squareup.okhttp:okhttp:2.1.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.1.0'
    // GSON
    compile 'com.google.code.gson:gson:2.3.1'
    // EventBus
    compile 'de.greenrobot:eventbus:2.4.0'
    // ACRA
    compile 'ch.acra:acra:4.5.0'
    // OrmLite
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.j256.ormlite:ormlite-core:4.48'
    // AndroidViewAni
    compile 'com.daimajia.easing:library:1.0.0@aar'
    compile 'com.daimajia.androidanimations:library:1.1.3@aar'
}

// Setup the Annotations Complier
apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        resourcePackageName 'qfpay.wxshop'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"
    // The Application Setting
    defaultConfig {
        applicationId "qfpay.wxshop"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 93
        versionName "3.7.0"
    }
    // The Signing Setting
    signingConfigs {
        release {
            storeFile file("key")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }
        debug {
            storeFile file("key")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }
    }
    // The build types, can define multi-type
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release // use the signing setting
        }
    }
    // The source sets, can define multi-set
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        instrumentTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions{
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
}
// use the flavors's name generate apk file
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        output.processManifest.doLast {
            copy {
                from("${buildDir}/manifests") {
                    include "${variant.dirName}/AndroidManifest.xml"
                }
                into("${buildDir}/manifests/$variant.name")

                filter {
                    String linechannel -> linechannel.replaceAll("UMENG_CHANNEL", "${variant.productFlavors[0].name}")
                }
                variant.processResources.manifestFile = file("${buildDir}/manifests/${variant.name}/${variant.dirName}/AndroidManifest.xml")
            }
        }
    }
    
}
